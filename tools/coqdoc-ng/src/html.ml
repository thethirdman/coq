(** Html output module, does the translation vdoc -> html *)

open Vdoc
open Printf
open Cst

exception Unhandled_case

let (in_doc: [`None | `Code | `Doc] ref) = ref `None

let doc s = s (*if !in_doc = `Doc then s
            else if !in_doc = `None then (in_doc := `Doc;
              "<div class=\"doc\">" ^ s)
            else (in_doc := `Doc;
              "</div><div class=\"doc\">" ^ s)*)

let code s = s
  (*if !in_doc = `Code then s
             else if !in_doc = `None then (in_doc := `Code;
             "<div class=\"code\">" ^ s)
             else (in_doc := `Code; "</div><div class=\"code\">" ^ s)*)

let initialize () = ()

let header () =
  (*FIXME: add title and charset *)
  "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n"              ^
  "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"                  ^
  "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n"                   ^
  "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf8\"/>\n" ^
  "<link href=\"coqdoc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n"        ^
  "<title>FIXME: TITLE</title>\n</head>\n\n"                                  ^
  "<body>\n\n<div id=\"page\">\n\n<div id=\"header\">\n</div>\n\n"            ^
  "<div id=\"main\">\n<div class=\"doc\">\n"

let rec print_with_sep sep = function
  [] -> ""
  | [e] -> e
  | e::l -> sprintf "%s%s%s" e sep (print_with_sep sep l)

(* Handle syntactic coloration of code pieces *)
let print_code = function
  Keyword s ->   sprintf "<span class=\"id\" type=\"keyword\">%s</span>" s
  | Ident s ->   sprintf "<span class=\"id\" type=\"var\">%s</span>" s
  | Literal s -> sprintf "lit: %s" s
  | Tactic s -> sprintf "tac: %s" s
  | Symbol s -> sprintf "sym: %s" s
  | NoFormat s -> s

let doc cst =

  let print_flat_element = function
    `Vernac s          -> sprintf"[%s]" s
    | `Pretty_print s  -> sprintf "[[%s]]" s
    | `Section (lvl,s) -> sprintf "<h%d class=\"section\">%s</h%d>" lvl s lvl
    | `Hrule           -> "<hr/>"
    | `Raw raw         -> if raw.html <> "" then raw.html else raw.default
    | `Verbatim s      -> sprintf"<tt>%s</tt>" s
    | `Content s       -> s
    | `Output_command (raw,args) -> print_with_sep raw.html args
    | `Code c_lst      -> sprintf "</div><div id=\"code\">%s</div><div id=\"doc\">"
        (print_with_sep " " (List.map print_code c_lst))
    in

  let rec print_rec_element = function
    | `Emphasis d      -> (sprintf "<i>%s</i>" (print_no_eval d))
    | `List lst        -> sprintf "<ul>\n%s\n</ul>"
      (print_with_sep "" (List.map print_no_eval lst))
    | `Seq lst -> print_with_sep "" (List.map print_no_eval lst)
    | `Root (a,b) -> sprintf "<a id=\"%s\">%s</a>" b (print_no_eval a)
    | `Link (a,b) -> sprintf "<a href=\"%s\">%s</a>" b (print_no_eval a)
    | `Item doc -> sprintf "<li>%s</li>" (print_no_eval doc)
    | _ -> raise Unhandled_case

  and print_no_eval = function
    | #Cst.flat_element as c -> print_flat_element c
    | #Cst.rec_element as c -> print_rec_element c
    |_ -> raise Unhandled_case in
    try Some (Str.global_replace (Str.regexp "\n") "<br/>\n" (print_no_eval cst)) with
      Unhandled_case -> None

(* FIXME: make real function *)
let indent n = " "

let newline () = "<br />"

(*FIXME*)
let index lst = ""

let footer () =
    "</div>\n<hr/>\nThis page has been generated by " ^
	  "<a href=\"#\">coqdoc</a>\n"            ^
	  "</div>\n\n</div>\n\n</body>\n</html>"
