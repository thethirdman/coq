(** Html output module, does the translation vdoc -> html *)

open Vdoc
open Printf
open Cst


let initialize () = ()

let header title =
  "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n"              ^
  "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"                  ^
  "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n"                   ^
  "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf8\"/>\n" ^
  "<link href=\"coqdoc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n"        ^
  "<title>"^ title ^ "</title>\n</head>\n\n"                                  ^
  "<body>\n\n<div id=\"page\">\n\n<div id=\"header\">\n</div>\n\n"            ^
  "<div id=\"main\">\n\n" ^
  "<h1>" ^ title ^ "</h1>\n<hr/>\n\n"

let pr_raw raw =
  if raw.html <> "" then raw.html
  else raw.default

let replace_newlines str = Str.global_replace (Str.regexp "\n") "<br/>\n" str

(* Handle syntactic coloration of code pieces *)
let doc cst =
  let print_flat_element = function
    `Vernac s          -> sprintf"[%s]" s
    | `Pretty_print s  -> sprintf "[[%s]]" s
    | `Section (lvl,s) -> sprintf "<h%d class=\"section\">%s</h%d>" lvl s lvl
    | `Hrule           -> "<hr/>"
    | `Raw raw         ->  pr_raw raw
    | `Verbatim s      -> sprintf"<tt>%s</tt>" s
    | `Content s       -> s
    in

  let rec print_rec_element = function
    | `Emphasis d      -> (sprintf "<i>%s</i>" (print_no_eval d))
    | `List lst        -> sprintf "<ul>%s</ul>"
      (String.concat "" (List.map print_no_eval lst))
    | `Seq lst -> String.concat "" (List.map print_no_eval lst)
    | `Item doc -> sprintf "<li>%s</li>" (print_no_eval doc)
    | _ -> raise Unhandled_case

  and print_no_eval = function
    | #Cst.flat_element as c -> print_flat_element c
    | #Cst.rec_element as c -> print_rec_element c
    |_ -> raise Unhandled_case in
    try Some
        (replace_newlines (print_no_eval cst))
    with Unhandled_case -> None

(** This function prints a link. Libname is the string corresponding to
 * the current lib being printed (in order to know if it is a local link or
 * not. *)
let pr_link libname link_type link =
  let normalize name = String.concat "_" name in
  match link_type with
    | `Root ->
      sprintf "<a id=\"%s\">%s</a>" (normalize link.adress) link.content
    | `Link ->
        if (is_local libname link.adress) && (not link.is_stdlib) then
          sprintf "local<a href=\"#%s\">%s</a>" (normalize link.adress) link.content
        else
          (** If the link is not local, we get the output file of the module *)
          sprintf "<a href=\"%s#%s\">%s</a>" (Settings.output_name_of_module
          (List.hd link.adress))
                  (normalize link.adress) link.content

let indent id_lvl =
  let str = "&nbsp;" and tab_size = 4 and ret = ref "" in
  if id_lvl = 0 then ""
  else
    begin
      for i = 1 to tab_size * id_lvl do
        ret := str ^ !ret
      done;
    !ret
    end

(** Libname is the name of the lib being printed *)
let code libname c =
  let rec aux = function
  Keyword s ->   sprintf "<span class=\"id\" type=\"keyword\">%s</span>" s
  | Ident s ->   sprintf "<span class=\"id\" type=\"var\">%s</span>" s
  | Literal s -> sprintf "<span class=\"id\" type=\"var\">%s</span>" s
  | Tactic s -> sprintf  "<span class=\"id\" type=\"inductive\">%s</span>" s
  | Symbol s -> sprintf "<span class=\"id\" type=\"lemma\">%s</span>" s
  | NoFormat s -> s
  | Root l -> pr_link libname `Root l
  | Link l -> pr_link libname `Link l
  | Output_command (raw,[]) -> pr_raw raw
  | Output_command (raw,args) -> String.concat (pr_raw raw) args
  | Indent (size,code) -> (indent size) ^ (aux code)
  in (List.map replace_newlines (List.map aux c))

let begindoc ()  = "<div class=\"doc\">"
let enddoc ()    = "</div>"
let begincode () = "<div class=\"code\">"
let endcode ()   = "</div>"

let newline () = "<br />"

let index lst =
  sprintf "<h1>Index of symbols</h1><br/>\n<hr/>\n<ul>\n%s</ul>\n"
    (String.concat "" (List.map (fun e -> sprintf "<li>%s</li>\n"
    (pr_link "" `Link e)) lst))

let file_index lst =
  sprintf "<h1>Index of files</h1><br/>\n<hr/>\n<ul>\n%s</ul>\n"
  (String.concat "" (List.map (fun (fname,modname) -> sprintf "<li><a href=\"%s\">%s</a></li>\n"
    (Settings.output_name_of_module modname) modname) lst))

let footer () =
    "\n<hr/>\nThis page has been generated by " ^
	  "<a href=\"#\">coqdoc</a>\n"            ^
	  "</div>\n\n</div>\n\n</body>\n</html>"
